@unicode-consumer ( -- )

( You will notice this one performs the font dereferencing (glyph lookup).
  Technically, this is total infringement into either the layouter or the
  renderer, but for the time being I'm going to keep it like this. This
  will enable progress at this time of development and as for the rest,
  we'll handle it later. )

  ( overflow protection )
  ( INC is to ensure there are always at least two open slots, this will be
    needed later for proper handling of degenerated combining mark seqs. )
  ;unicode-stream/tot LDA INC unicode-stream-size LTH ,&process JCN
    LIT LBCode-x ( if the render unit ends with an x, the layouter will
                   print everything, including all leading whitespace )
    ;unicode-stream/tot LDA #01 SUB
    ;unicode-layouter CALL
      ( ensure everything is behaving as expected )
      #00 EQU ,&layouter-is-sane JCN
        ( but if the layouter is insane, )
        ( signal an error, and then... ) RET
    &layouter-is-sane
    #01 ;unicode-stream/tot STA
  &process

  ;utf8result/high STH2k LDA STH2r INC2 LDA2
  ;code-bits CALL                              ( this is the dereference )
  DUP2 #0000 EQU2 ,&error JCN
( stack: codecharptr* )

  ( Hmm, maybe it would be a better idea to first fill the buffer with the
    new character, and only then call the layouter. That would eliminate the
    situation where two data buffers need to be held, and would basically
    free memory for other uses... )

  ;unicode-stream/tot LDA
  ;unicode-stream/off LDA ADD unicode-stream-mask AND
  ToPosShort STH2

( stack: off* // codecharptr* )
  DUP2 INC LDA
( stack: off* // codecharptr* lbclass )
  ;unicode-lbalgo-data/right-lbclass LDAk STH STA
  STHr ;unicode-lbalgo-data/left-lbclass STA
( stack: off* // codecharptr* )
  ;unicode-lbalgo-data/state LDA ToPosShort
  ;unicode-lbalgo-statecalls ADD2 LDA2 CALL ( note, these may inject U+00A0 )
( stack: off* // codecharptr* lb-code )

  DUP LIT LBCode-x EQU ,&cont1 JCN
    ;unicode-stream/tot LDA
    ;unicode-layouter CALL
    ;unicode-stream/tot STA
    #00 ( dummy value to sync up with the below POP )
  &cont1
  POP
( stack: off* // codecharptr* )

  LDAk
  STH2kr ;unicode-stream/class  ADD2 STA
  #0003 ADD2
  LDAk STH2kr ;unicode-stream/gmdoff ADD2 STA
  INC2

( stack: off* // codecharptr* )
  LDA2k          STH2kr #20 SFT2           ;unicode-stream/bmpoff ADD2 STA2
  INC2 INC2 LDA2 STH2kr #20 SFT2 INC2 INC2 ;unicode-stream/bmpoff ADD2 STA2

( stack: off* // )
  POP2r
  ;unicode-stream/tot LDAk INC ROT ROT STA
  RET

  &error
  POP2
RET

@unicode-consumer-flush ( -- ) ( call it at eot )
  #00
  ;unicode-stream/tot LDAk
  STH STA STHr
( stack: // len )
  DUP #00 EQU ,&no-display JCN
  ( do-display )
    LIT LBCode-E SWP ;unicode-layouter CALL ( when being called with LBCode-E
                                              it's supposed to leave an empty
                                              buffer without any leading
                                              whitespace )
  &no-display
    POP
( stack: // )
  ;unicode-lbalgo-reset CALL
RET
