%inc-x { .Screen/x DEI2k INC2 ROT DEO2 }
%inc-y { .Screen/y DEI2k INC2 ROT DEO2 }

( draws len^ codepoints/glyphs starting from the beginning of the buffer )
@draw-all ( len -- len )
  #00
  ;unicode-stream/off LDA STH
  &loop
    EQUk ,&end JCN
    DUP STHkr ADD unicode-stream-mask AND ToPosShort
    ,draw JSR
    INC
    ,&loop JMP

  &end
  POPr POP
RET

@draw ( codeoff* -- )

  ( pure software implementation )

  DUP2 ;unicode-stream/class ADD2 LDA
  #00 NEQ ,&process JCN
    POP2 RET
  &process

  DUP2 ;unicode-stream/bbw ADD2 LDA STH
  DUP2 ;unicode-stream/bbh ADD2 LDA STH

  #20 SFT2

  DUP2
  ;unicode-stream/bmpoff ADD2
  ;unicode-dbbuffs/d1  SWP2
  ;scroll-dataset/bitmap CALL
    ( check the return value, for errors )
    DUP2 #0000 NEQ2 ,&bitmap-looked-up JCN
    POP2 POP2 POP2r RET
  &bitmap-looked-up
  STH2r
  ROT2

  ;unicode-stream/pos-xy ADD2 LDA2k
  ;unicode-stream/startx LDA2 ADD2
  STH2k .Screen/x DEO2
  INC2 INC2 LDA2
  ;unicode-stream/starty LDA2 SWP2 SUB2
  .Screen/y DEO2


( stack: og-x* // bitmapptr* glyph-w glyph-h )

  &draw-glyph
  DUP #00 EQU ,&end JCN
  #01 SUB STH
  DUP STH
( stack: og-x* cur-glyph-h glyph-w // bitmapptr* glyph-w-cnt )

  &draw-one-row
  DUP #01 SUB LTHk ,&done-one-row JCN
( stack: og-x* cur-glyph-h glyph-w // bitmapptr* glyph-w-cnt glyph-w-cntnew )

    NIP
    STH DUP2 INC2 SWP2 LDA STHr
( stack: og-x* cur-glyph-h glyph-w // bitmapptr* bitmap glyph-w-cnt )
    SWP #07
( stack: og-x* cur-glyph-h glyph-w // bitmapptr* glyph-w-cnt bitmap seven )

( top-o-stack: bitmap seven )
    &run-row-oct
      DUP2 SFT #01 AND ,&put-pixel JCN ,&done-putting-pixel JMP
      &put-pixel #01 .Screen/pixel DEO &done-putting-pixel
( top-o-stack: bitmap seven )
      inc-x
      DUP #01 SUB LTHk
( top-o-stack: bitmap seven newseven testresult )
      ,&done-row-oct JCN
      NIP ,&run-row-oct JMP
      &done-row-oct
      POP2 POP
      ,&draw-one-row JMP

  &done-one-row
  POP2 inc-y STHr STHr
  STH2kr .Screen/x DEO2
  ,&draw-glyph JMP

  &end
  POP2r POP2 POP2
RET
