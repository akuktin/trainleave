(
@layouter-codepointmap-dataset [
  &class $1 &glyphmetadata-offset $3
  &bitmap-offset $4 ( top $2 is which file, bottom $2 is offset in file )
]
@layouter-glyphmetadata-dataset [
  &dwidthx $1 &dwidthy $1
  &bbw     $1 &bbxoff  $1
  &bbh     $1 &bbyoff  $1
  &pad0 $2
]
)

@unifont-bitmap-pfx   "db/bitmap.unifont. &code "0000  00
@unifont-codechar-pfx "db/codechar.unifont &code-offset ". &code "00 00



@unicode-layouter-rewind-pos ( advancex* advancey* len -- )
  STH STH2 ROTr STH2 ROTr
  STHr #00
( stack: counter-advancey* counter-advancex* // len cnt )

  &begin
  GTHk #01 EOR ,&end JCN
    DUP ;unicode-stream/off LDA ADD unicode-stream-mask AND ToPosShort
    ;unicode-stream/pos-xy ADD2
( stack: counter-advancey* counter-advancex* // len cnt posptr* )

    LDA2k STH2kr SUB2 SWP2 STA2k NIP2
    INC2 INC2 OVR2r
    LDA2k STH2r  SUB2 SWP2 STA2
( stack: counter-advancey* counter-advancex* // len cnt )

    INC
    ,&begin JMP

  &end
  POP2 POP2r POP2r
RET

%Unicode-layouter-zero-markoffset {
  #0000 ;unicode-layout/cur220y STA
        ;unicode-layout/cur230y STA
}

@unicode-layouter-zero-renderunit ( -- )
  &all
  Unicode-layouter-zero-markoffset

  &bigptr
  #0000 ,unicode-layout/advancex STR2
  #0000 ,unicode-layout/advancey STR2

  #0000 ,unicode-layout/originx STR2
  #0000 ,unicode-layout/originy STR2
RET

@unicode-layouter-advance-stream-offset ( len -- )
  ;unicode-stream/off LDA ADD unicode-stream-mask AND
  ;unicode-stream/off STA
RET

@unicode-layouter-wrap-line ( -- )
  ,unicode-layout/minx   LDR2 ;unicode-stream/startx STA2
  ;unicode-stream/starty DUP2 LDA2
  ,unicode-layout/lineadvance LDR2
  ADD2 SWP2 STA2
RET

%Unicode-layouter-position-in-x {
  STH2kr LObbxoff ADD2 LDA ToShort
  ;unicode-layout/originx LDA2 ADD2
  OVR2 #20 SFT2 ;unicode-stream/pos-xy ADD2 STA2
}


@unicode-layout
  &sizeup ( -- )
          .Screen/height DEI2 ,&maxy STR2
          .Screen/width  DEI2 ,&maxx STR2 RET
  [
    ( y advance for when flipping from one line to the next )
    &lineadvance 0010 ( vertical advance between lines )

    ( physical location of the rendering window on the screen )
    &minx     0006 &miny     0006
    &maxx     ffff &maxy     ffff

    ( delta in y for stacking nonspacing marks )
    &cur220y  00
    &cur230y  00

    ( how muchh to advance the render unit pointer after rendering the unit )
    &advancex 0000
    &advancey 0000 ( for the time being, only take into account
                     the base character )

    ( where to render this base character within the rendering unit )
    &originx  0000
    &originy  0000

    ( the LB code to the left of the rendering unit )
    &linbreak LBCode-x
  ]

%LObbw { #0002 }
%LObbh { #0004 }
%LObbxoff { #0003 }
%LObbyoff { #0005 }
%LObitmap { #0006 }
@unicode-layouter ( lbcode len -- remains )

  ( important variables:
      len - length of the "string" to render
      i   - length of the "string" rendered so far (whitespace and non)
      nwh - length of non-whispace "string" rendered so far )

  ;unicode-stream/lead LDA STHk SWP STH
  &begin
  DUP STHkr LTH ,&do-a-loop JCN
( stack: nwh len // lbcode i )
    POP

    ( this is the regular draw )
    SWPr STHr
( stack: len // lbcode nwh ) ( len = total num of chars in the buffer )
    DUP #00 EQU ,&nothing-to-render JCN
      ;draw-all CALL
      DUP ;unicode-layouter-advance-stream-offset CALL ( consumes a byte )
      STH SUBr
      ,&perform-handover JMP
( stack: len // lbcode )
    &nothing-to-render
      POP

    &perform-handover
    DUP LIT LBCode-E NEQ ,&normal-handover JCN
( stack: len // lbcode )
      ;unicode-layouter-wrap-line CALL
      POP LIT LBCode-x
      ( erase all leading whitespace )
      STHr ;unicode-layouter-advance-stream-offset CALL ( consumes a byte )
      #00 ;unicode-stream/lead STA
      #00
      ,&zero-renderunit JMP

    &normal-handover
( stack: len // lbcode )

    ( advance the pointer for the render unit in x )
    ;unicode-layout/advancex LDA2
    DUP2 ( leave for later )
    ;unicode-stream/startx LDA2k
    ROT2 ADD2 SWP2 STA2

    ( advance the pointer for the render unit in y )
    ;unicode-layout/advancey LDA2
    DUP2 ( leave for later )
    ;unicode-stream/starty LDA2k
    ROT2 ADD2 SWP2 STA2
( stack: len // lbcode advancex* advancey* )

    STHkr
    ;unicode-layouter-rewind-pos CALL
    STHr

    DUP ;unicode-stream/lead STA

( stack: // lbcode len )
    &zero-renderunit
    ;unicode-layouter-zero-renderunit/all CALL

    SWP ;unicode-layout/linbreak STA
( stack: // len )
    RET

  &do-a-loop
  STHk ;unicode-stream/off LDA ADD unicode-stream-mask AND
( stack: nwh len i // lbcode off )

  ToPosShort DUP2
  ;unicode-stream/gmdoff ADD2 LDA
  ToPosShort
  ;unifont-glyphmetadata ADD2
  STH2
( stack: nwh len i glyphptr* // lbcode off* )

  ( position the bitmap relative to glyph rendering origin )

  ( first figure out if this is a base character or a (supported) NS mark )
    ( for the time being, the only (nonspacing) marks that are supported are
      the ones that stack above or below the base )
  DUP2 ;unicode-stream/class ADD2 LDA
  #05 SFT #03 AND
  #01 LTHk ,&base-char JCN
( stack: nwh len i glyphptr* // lbcode off* class 01 )
  EQU ,&nsmark-below JCN
  &nsmark-above
    ;unicode-layout/cur220y ,&nsmark JMP

  &nsmark-below
    ;unicode-layout/cur230y

  &nsmark
    ( position the bitmap in the render unit, in y )
( stack: nwh len i glyphptr* // lbcode off* cur___y* )
    LDAk
( stack: nwh len i glyphptr* // lbcode off* cur___y* d-y )
    STH2kr LObbh ADD2 LDA2 ( <- pulls both bbh and bbyoff ) ADD
    ADD ToShort
    ;unicode-layout/originy LDA2 ADD2
( stack: nwh len i glyphptr* // lbcode off* cur___y* d-y* )
    STH2 OVR2 STH2r SWP2
( stack: nwh len i glyphptr* // lbcode off* cur___y* d-y* off* )
    #20 SFT2 ;unicode-stream/pos-xy ADD2 INC2 INC2 STA2
( stack: nwh len i glyphptr* // lbcode off* cur___y* )
    ( here we advance the mark's y glyph origin )
    LDAk
    STH2kr INC2 LDA
    ADD
    ROT ROT
    STA
( stack: nwh len i glyphptr* // lbcode off* )

    ( position the bitmap in the render unit, in x )
    Unicode-layouter-position-in-x

    ;&done-positioning JMP2


  &base-char
( stack: nwh len i glyphptr* // lbcode off* class 01 )
    POP2

    ( ensure the render unit can fit into the rendering field )
    ;unicode-stream/startx LDA2
    ;unicode-layout/originx LDA2 ADD2
    STH2kr LObbw ADD2 LDA2 ( <- pulls both bbw and bbxoff ) ADD ToShort
    ADD2
( stack: nwh len i glyphptr* // lbcode off* maxpos-in-x* )

    ;unicode-layout/maxx LDA2 GTH2 #01 EOR ,&fits-in-x JCN
      ;unicode-layout/linbreak LDA
      LIT LBCode-x
      NEQ ,&line-break-entire-unit JCN

( stack: nwh len i glyphptr* // lbcode off* )

      ( line-break-front-of-unit ) ( break the unit, render first half )
                                   ( emergency break, therefore no guarantee
                                     various render rules will be observed )
        SWP2r STH2r ROTr POPr
	( this is the emergency draw )
       ;draw-all CALL ( returns how many it drew )
       DUP
       ;unicode-layouter-advance-stream-offset CALL ( consumes a byte )

( stack: glyphptr* // lbcode off* len drawn )
       SUB STH2r ROT #00 STHk STH2 STH2

( stack: nwh len i glyphptr* // lbcode off* )
	;unicode-layouter-zero-renderunit/bigptr CALL

        ,&wrap-start JMP

      &line-break-entire-unit
        ( nip any leading whitespace )
        (   but first reduce the counters )
        STH2r
        #00 ;unicode-stream/lead LDAk
        ROTr STHk SUBr
        ROTr STHk SUBr
        ROTr STHk SUBr
        (   then nip )
        ;unicode-layouter-advance-stream-offset CALL
        STA STH2

        ( set the left lbcode to LBCode-x because
          this is the start of the line )
        LIT LBCode-x ;unicode-layout/linbreak STA

        &wrap-start
        ;unicode-layouter-wrap-line CALL
    &fits-in-x


    ( position the bitmap in the render unit, in y )
    STH2kr LObbh ADD2 LDA2 ( <- pulls both bbh and bbyoff ) ADD ToShort
    ;unicode-layout/originy LDA2 ADD2
    OVR2 #20 SFT2 ;unicode-stream/pos-xy ADD2 INC2 INC2 STA2

    ( position the bitmap in the render unit, in x )
    Unicode-layouter-position-in-x

( stack: nwh len i glyphptr* // lbcode off* )

    ( advance the x of the glyphs in this render unit, and ... )
    STH2kr     LDA ToShort
    DUP2
    ;unicode-layout/originx  LDA2k ROT2 ADD2 SWP2 STA2
    ( ... add up the x advance for the render unit )
    ;unicode-layout/advancex LDAk2 ROT2 ADD2 SWP2 STA2

    ( advance the y of the glyphs in this render unit, and ... )
    STH2kr INC LDA ToShort
    DUP2
    ;unicode-layout/originy  LDAk2 ROT2 ADD2 SWP2 STA2
    ( ... add up the y advance for the render unit )
    ;unicode-layout/advancey LDAk2 ROT2 ADD2 SWP2 STA2

    Unicode-layouter-zero-markoffset

  &done-positioning
( stack: nwh len i glyphptr* // lbcode off* )


  ( third, get the dimensions of the glyph bitmap... )
  STH2kr LObbh ADD2 LDA                 ( glyph height in rows of octets )
  STH2kr LObbw ADD2 LDA #07 ADD #03 SFT ( glyph width in octets of bitmaps )
( stack: nwh len i glyphptr* // lbcode off* glyph-h glyph-w )
  ( ... and store it into the stream buffer )
  OVR2 ;unicode-stream/bbw ADD2 STA
  ROT ROT
( stack: nwh len i glyphptr* // lbcode glyph-h off* )
  STH2k ;unicode-stream/bbh ADD2 STA

( stack: nwh len i glyphptr* off* // lbcode )

  NIP2r
  STH2r ;unicode-stream/class ADD2 LDA #80 AND
  #80 EQU ,&is-whitespace JCN
( stack: nwh len i // lbcode )
  ( &is-not-whitespace )
    STHr INC NIPr STHk SWPr ;&begin JMP2
  &is-whitespace
    STHr INC                ;&begin JMP2
