(
@layouter-codepointmap-dataset [
  &class $1 &glyphmetadata-offset $3
  &bitmap-offset $4 ( top $2 is which file, bottom $2 is offset in file )
]
@layouter-glyphmetadata-dataset [
  &dwidthx $1 &dwidthy $1
  &bbw     $1 &bbxoff  $1
  &bbh     $1 &bbyoff  $1
  &pad0 $2
]
)
@unifont-glyphmetadata
  10 00 10 00 10 fe 00 00  08 00 08 00 10 fe 00 00
  00 04 08 00 10 fe 00 00  00 fc 08 00 10 fe 00 00
  00 04 10 00 10 fe 00 00  00 fc 10 00 10 fe 00 00
@unifont-bitmap-pfx   "db/bitmap.unifont. &code "0000  00
@unifont-codechar-pfx "db/codechar.unifont &code-offset ". &code "00 00




@unicode-layout
  &sizeup ( -- )
          .Screen/height DEI2 ,&maxy STR2
          .Screen/width  DEI2 ,&maxx STR2 RET
  [ &lineadvance 0010 ( vertical advance between lines )
    &minx     0006 &miny     0006
    &maxx     ffff &maxy     ffff ]

  &cur220y  00
  &cur230y  00
  &advancex 0000
  &advancey 0000 ( for the time being, only take into account
                   the base character )
  &originx  0000
  &originy  0000
  &linbreak LBCode-x

%LObbw { #0002 }
%LObbh { #0004 }
%LObbxoff { #0003 }
%LObbyoff { #0005 }
%LObitmap { #0006 }
@unicode-layouter ( lbcode len -- )

  ( we presume there is at least one codepoint to render - otherwise
    don't call us! )

  STH #00
  &begin
  DUP STHkr LTH ,&do-a-loop JCN
( stack: len // lbcode i )
    POP
    STHkr ;draw-all CALL ( doesn't consume the argument )
    ;unicode-stream/off LDA STHr ADD unicode-stream-mask AND
    ;unicode-stream/off STA

    #0000 ;unicode-layout/cur220y STA ;unicode-layout/cur230y STA

    #0000
    ;unicode-layout/advancex LDA2k STH2 STA2 STH2r
    ;unicode-stream/startx LDA2k
    ROT2 ADD2 SWP2 STA2

    #0000
    ;unicode-layout/advancey LDA2k STH2 STA2 STH2r
    ;unicode-stream/starty LDA2k
    ROT2 ADD2 SWP2 STA2

    #0000 ;unicode-layout/originx STA2
    #0000 ;unicode-layout/originy STA2

( stack: // lbcode len )
    POP
    ;unicode-layout/linbreak STA

    RET

  &do-a-loop
  STHk ;unicode-stream/off LDA ADD unicode-stream-mask AND
( stack: len i // lbcode off )

  ToPosShort DUP2
  ;unicode-stream/gmdoff ADD2 LDA
  ToPosShort
  ;unifont-glyphmetadata ADD2
  STH2
( stack: len i glyphptr* // lbcode off* )

  ( first, position the bitmap relative to glyph rendering origin )

  ( calculate the x origin of the bitmap and store it )
  STH2kr LObbxoff ADD2 LDA ToShort
  ;unicode-layout/originx LDA2 ADD2
  OVR2 #20 SFT2 ;unicode-stream/pos-xy ADD2 STA2

  ( calcuate the y origin of the bitmap, by class, and store it )
  DUP2 ;unicode-stream/class ADD2 LDA
  #05 SFT #03 AND
  #01 LTHk ,&base-char JCN
  EQU ,&nsmark-below JCN
  &nsmark-above
    ;unicode-layout/cur220y ,&nsmark JMP

  &nsmark-below
    ;unicode-layout/cur230y

  &nsmark
    LDAk
( stack: len i glyphptr* // lbcode off* cur___y* d-y )
    STH2kr LObbh ADD2 LDA2 ( <- pulls both bbh and bbyoff ) ADD
    ADD ToShort
    ;unicode-layout/originy LDA2 ADD2
( stack: len i glyphptr* // lbcode off* cur___y* d-y* )
    STH2 OVR2 STH2r SWP2
( stack: len i glyphptr* // lbcode off* cur___y* d-y* off* )
    #20 SFT2 ;unicode-stream/pos-xy ADD2 INC2 INC2 STA2
( stack: len i glyphptr* // lbcode off* cur___y* )
    ( here we advance the mark's y glyph origin )
    LDAk
    STH2kr INC2 LDA
    ADD
    ROT ROT
    STA
( stack: len i glyphptr* // lbcode off* )
    ;&cont3 JMP2

  &base-char
    POP2
    STH2kr LObbh ADD2 LDA2 ( <- pulls both bbh and bbyoff ) ADD ToShort
    ;unicode-layout/originy LDA2 ADD2
    OVR2 #20 SFT2 ;unicode-stream/pos-xy ADD2 INC2 INC2 STA2

    ( get the x advance for the glyph )
    STH2kr     LDA ToShort
    ( advance the x of the glyphs in this render unit )
    DUP2
    ;unicode-layout/originx  LDA2k ROT2 ADD2 SWP2 STA2
    ( add up the x advance for the render unit )
    ;unicode-layout/advancex LDAk2 ROT2 ADD2 SWP2 STA2

    ( get the y advance for the glyph )
    STH2kr INC LDA ToShort
    ( advance the y of the glyphs in this render unit )
    DUP2
    ;unicode-layout/originy  LDAk2 ROT2 ADD2 SWP2 STA2
    ( add up the y advance for the render unit )
    ;unicode-layout/advancey LDAk2 ROT2 ADD2 SWP2 STA2

    ( ensure the glyph, later on grapheme cluster/render unit, can
      fit into the rendering field )
    ;unicode-stream/startx LDA2
    STH2kr LObbw ADD2 LDA2 ( <- pulls both bbw and bbxoff ) ADD ToShort
    ;unicode-layout/originx LDA2 ADD2
    ADD2
    ;unicode-layout/maxx LDA2 GTH2 #01 EOR ,&fits-in-x JCN
      ;unicode-layout/minx   LDA2 ;unicode-stream/startx STA2
      ;unicode-stream/starty DUP2 LDA2
      ;unicode-layout/lineadvance LDA2
      ADD2 SWP2 STA2

      STH2 ;unicode-layout/linbreak STA LIT LBCode-x STH2r
    &fits-in-x


  &cont3

  ( third, get the dimensions of the glyph bitmap )
  STH2kr LObbh ADD2 LDA                 ( glyph height in rows of octets )
  STH2kr LObbw ADD2 LDA #07 ADD #03 SFT ( glyph width in octets of bitmaps )
( stack: len i glyphptr* // lbcode off* glyph-h glyph-w )
  OVR2 ;unicode-stream/bbw ADD2 STA
  STH STH2k ROTr STHr STH2r
  ;unicode-stream/bbh ADD2 STA

  ( finally, draw the glyph )
  POP2
( stack: len i glyphptr* // lbcode )

  POP2r
( stack: len i // lbcode )

  STHr INC
  ;&begin JMP2
