(
@layouter-codepointmap-dataset [
  &class $1 &glyphmetadata-offset $3
  &bitmap-offset $4 ( top $2 is which file, bottom $2 is offset in file )
]
@layouter-glyphmetadata-dataset [
  &dwidthx $1 &dwidthy $1
  &bbw     $1 &bbxoff  $1
  &bbh     $1 &bbyoff  $1
  &pad0 $2
]
)
@unifont-glyphmetadata
  10 00 10 00 10 fe 00 00  08 00 08 00 10 fe 00 00
  00 04 08 00 10 fe 00 00  00 fc 08 00 10 fe 00 00
  00 04 10 00 10 fe 00 00  00 fc 10 00 10 fe 00 00
@unifont-bitmap-pfx   "db/bitmap.unifont. &code "0000  00
@unifont-codechar-pfx "db/codechar.unifont &code-offset ". &code "00 00




@unicode-layout
  &sizeup ( -- )
          .Screen/height DEI2 ,&maxy STR2
          .Screen/width  DEI2 ,&maxx STR2 RET
  [ &globbbx  0010 &globbby  0010 ( global bounding box for the entire font )
    &beginx   0006 &beginy   0006
    &posx     0006 &posy     0006   ( position of the render unit's origin
                                      on the screen )
    &maxx     ffff &maxy     ffff ]
  &curx     0110 &cury 0020 ( position of the glyph's origin on the screen )

  &cur220y  00
  &cur230y  00
  &advancex 0000
  &advancey 0000 ( for the time being, only take into account
                   the base character )
  &linbreak 00   ( if 0, then to the left is an x from the line-breaking algo
                   and only emergency linebreaks are possible; if 1, then :
                   is to the left and normal linebreaks are possible )

%LObbw { #0002 }
%LObbh { #0004 }
%LObbxoff { #0003 }
%LObbyoff { #0005 }
%LObitmap { #0006 }
@unicode-layouter ( new-linbreak len -- )

  ( we presume there is at least one codepoint to render - otherwise
    don't call us! )
NIP

  STH #00
  &begin
  DUP STHkr LTH ,&do-a-loop JCN
( stack: len // i )
    POP
    STHr ;draw-all CALL

    #0000 ;unicode-layout/cur220y STA ;unicode-layout/cur230y STA

    ;unicode-layout/advancex LDA2
    ;unicode-stream/startx LDA2k
    ROT2 ADD2 SWP2 STA2

    ;unicode-layout/advancey LDA2
    ;unicode-stream/starty LDA2k
    ROT2 ADD2 SWP2 STA2

    POP
    RET

  &do-a-loop ( na kraju mora da INC i )
  STHk ;unicode-stream/off LDA ADD unicode-stream-mask AND
( stack: len i // off )

  ToPosShort DUP2
  ;unicode-stream/gmdoff ADD2 LDA
  ToPosShort
  ;unifont-glyphmetadata ADD2
  STH2
( stack: len i glyphptr* // off* )

  ( first, position the bitmap relative to glyph rendering origin )

  STH2kr LObbxoff ADD2 LDA ToShort
  OVR2 #20 SFT2 ;unicode-stream/pos-xy ADD2 STA2

  DUP2 ;unicode-stream/class ADD2 LDA
  #05 SFT #03 AND
  #01 LTHk ,&base-char JCN
  EQU ,&nsmark-below JCN
  &nsmark-above
    ;unicode-layout/cur220y ,&nsmark JMP

  &nsmark-below
    ;unicode-layout/cur230y

  &nsmark
    LDAk
( stack: len i glyphptr* // off* cur___y* d-y )
    STH2kr LObbh ADD2 LDA2 ( <- pulls both bbh and bbyoff ) ADD
    ADD ToShort
( stack: len i glyphptr* // off* cur___y* d-y* )
    STH2 OVR2 STH2r SWP2
( stack: len i glyphptr* // off* cur___y* d-y* off* )
    #20 SFT2 ;unicode-stream/pos-xy ADD2 INC2 INC2 STA2
( stack: len i glyphptr* // off* cur___y* )
    LDAk
    STH2kr INC2 LDA
    ADD
    ROT ROT
    STA
( stack: len i glyphptr* // off* )
    ,&cont3 JMP

  &base-char
    POP2
    STH2kr LObbh ADD2 LDA2 ( <- pulls both bbh and bbyoff ) ADD ToShort
    OVR2 #20 SFT2 ;unicode-stream/pos-xy ADD2 INC2 INC2 STA2

    STH2kr     LDA ToShort ;unicode-layout/advancex STA2
    STH2kr INC LDA ToShort ;unicode-layout/advancey STA2

    ( ensure the glyph, later on grapheme cluster/render unit, can
      fit into the rendering field )
    ;unicode-stream/startx LDA2
    STH2kr LObbw ADD2 LDA2 ( <- pulls both bbw and bbxoff ) ADD ToShort
    ADD2
    ;unicode-layout/maxx LDA2 GTH2 #01 EOR ,&fits-in-x JCN
      ;unicode-layout/beginx LDA2 ;unicode-stream/startx STA2
      ;unicode-stream/starty DUP2 LDA2
      ;unicode-layout/globbby LDA2
      ADD2 SWP2 STA2
    &fits-in-x


  &cont3

  ( third, get the dimensions of the glyph bitmap )
  STH2kr LObbh ADD2 LDA                 ( glyph height in rows of octets )
  STH2kr LObbw ADD2 LDA #07 ADD #03 SFT ( glyph width in octets of bitmaps )
( stack: len i glyphptr* // off* glyph-h glyph-w )
  OVR2 ;unicode-stream/bbw ADD2 STA
  STH STH2k ROTr STHr STH2r
  ;unicode-stream/bbh ADD2 STA

  ( finally, draw the glyph )
  POP2
( stack: len i glyphptr* // )

  POP2r
( stack: len i // )

  STHr INC
  ;&begin JMP2
